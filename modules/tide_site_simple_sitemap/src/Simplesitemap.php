<?php

namespace Drupal\tide_site_simple_sitemap;

use Drupal\simple_sitemap\Plugin\simple_sitemap\SitemapGenerator\SitemapGeneratorBase;
use Drupal\simple_sitemap\Simplesitemap as DefaultSimplesitemap;
use Symfony\Component\HttpFoundation\RequestStack;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * Class simple sitemap.
 *
 * @package Drupal\tide_site_simple_sitemap
 */
class Simplesitemap extends DefaultSimplesitemap {

  /**
   * The current Request.
   *
   * @var \Symfony\Component\HttpFoundation\Request
   */
  protected $request;

  /**
   * Set the current request.
   *
   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
   *   The request stack.
   */
  public function setRequest(RequestStack $request_stack) {
    $this->request = $request_stack->getCurrentRequest();
  }

  /**
   * {@inheridoc}
   */
  protected function fetchSitemapChunk($id) {
    $site_id = $this->request->get('site');
    if (empty($site_id)) {
      return parent::fetchSitemapChunk($id);
    }
    return $this->db->query('SELECT * FROM {simple_sitemap_site} WHERE site_id = :site_id',
      [':site_id' => $site_id])->fetchAll();
  }

  /**
   * {@inheridoc}
   */
  public function getSitemap($delta = NULL) {
    $results = $this->fetchSitemapChunk(SitemapGeneratorBase::FIRST_CHUNK_DELTA);
    if ($results instanceof \stdClass) {
      return parent::getSitemap($delta);
    }
    if (FALSE === $results) {
      return parent::getSitemap($delta);
    }
    if (count($results) === 0) {
      throw new NotFoundHttpException();
    }
    $site_id = $results[0]->site_id;
    if ($cache = \Drupal::cache()->get('xml-' . $site_id)) {
      return $cache->data;
    }
    $xmlstr = <<<XML
<?xml version="1.0" encoding="UTF-8"?>
<!--Generated by the Simple XML Sitemap Drupal module: https://drupal.org/project/simple_sitemap.-->
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9" xmlns:image="http://www.google.com/schemas/sitemap-image/1.1">
</urlset>
XML;
    $new_xml = simplexml_load_string($xmlstr);
    foreach ($results as $result) {
      /** @var \SimpleXMLElement $xml */
      $xml = simplexml_load_string($result->sitemap_string);
      foreach ($xml as $item) {
        $url = $new_xml->addChild('url', '');
        if (!empty($item->loc)) {
          $url->addChild('loc', $item->loc);
        }
        if (!empty($item->changefreq)) {
          $url->addChild('changefreq', $item->changefreq);
        }
        if (!empty($item->lastmod)) {
          $url->addChild('lastmod', $item->lastmod);
        }
        if (!empty($item->priority)) {
          $url->addChild('priority', $item->priority);
        }
      }
    }
     $final_xml = $new_xml->asXML();
     \Drupal::cache()
       ->set('xml-' . $site_id, $final_xml, \Drupal::time()->getRequestTime() + (3600));
    return $final_xml;
  }

}
