<?php

namespace Drupal\tide_site_simple_sitemap;

use Drupal\Core\Entity\EntityTypeManagerInterface;
use Drupal\simple_sitemap\SitemapGenerator as DefaultSitemapGenerator;
use Drupal\tide_site\AliasStorageHelper;
use Drupal\tide_site\TideSiteHelper;
use Symfony\Component\HttpFoundation\RequestStack;

/**
 * Class SitemapGenerator.
 *
 * @package Drupal\tide_site_simple_sitemap
 */
class SitemapGenerator extends DefaultSitemapGenerator {

  /**
   * Tide Site Helper.
   *
   * @var \Drupal\tide_site\TideSiteHelper
   */
  protected $helper;

  /**
   * Alias Helper.
   *
   * @var \Drupal\tide_site\AliasStorageHelper
   */
  protected $aliasHelper;

  /**
   * Entity Type Manager.
   *
   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
   */
  protected $entityTypeManager;

  /**
   * The current Request.
   *
   * @var \Symfony\Component\HttpFoundation\Request
   */
  protected $request;

  /**
   * Set the current request.
   *
   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
   *   The request stack.
   */
  public function setRequest(RequestStack $request_stack) {
    $this->request = $request_stack->getCurrentRequest();
  }

  /**
   * Set Tide Site Helper.
   *
   * @param \Drupal\tide_site\TideSiteHelper $helper
   *   The helper object.
   */
  public function setHelper(TideSiteHelper $helper) {
    $this->helper = $helper;
  }

  /**
   * Set Entity Type Manager.
   *
   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
   *   The manager.
   */
  public function setEntityTypeManager(EntityTypeManagerInterface $entity_type_manager) {
    $this->entityTypeManager = $entity_type_manager;
  }

  /**
   * Set Alias helper.
   *
   * @param \Drupal\tide_site\AliasStorageHelper $alias_helper
   *   Alias helper.
   */
  public function setAliasHelper(AliasStorageHelper $alias_helper) {
    $this->aliasHelper = $alias_helper;
  }

  /**
   * {@inheritdoc}
   */
  public function getCustomBaseUrl() {
    // Returns the Site base URL if the site parameter exists.
    $site_id = $this->request->get('site');
    if (!empty($site_id)) {
      $site = $this->helper->getSiteById($site_id);
      if ($site) {
        $site_base_url = $this->helper->getSiteBaseUrl($site);
        if ($site_base_url) {
          return $site_base_url;
        }
      }
    }

    return parent::getCustomBaseUrl();
  }

  /**
   * {@inheritdoc}
   */
  public function generateSitemap(array $links, $remove_sitemap = FALSE) {
    parent::generateSitemap($links, $remove_sitemap);

    if ($remove_sitemap) {
      $this->db->truncate('simple_sitemap_site')->execute();
    }

    // We have the sitemap chunk generated by Simple Sitemap.
    // Each sitemap chunk will be split per site and stored in our
    // simple_sitemap_site table.
    $chunk_id = $remove_sitemap ? self::FIRST_CHUNK_INDEX
      : $this->db->query('SELECT MAX(id) FROM {simple_sitemap}')
        ->fetchField();

    $sites = $this->helper->getAllSites();
    if (!empty($sites)) {
      // Prepare to copy/split sitemap links to all sites.
      $links_per_site = [];
      /** @var \Drupal\taxonomy\TermInterface $site */
      foreach ($sites as $site_id => $site) {
        $links_per_site[$site_id] = [];
      }

      foreach ($links as $link) {
        $restricted_by_site = FALSE;
        $meta = &$link['meta'];
        // Check if the link has an entity which is restricted by site.
        if (!empty($meta['entity_info']['entity_type'])) {
          $entity_type = $meta['entity_info']['entity_type'];
          if ($this->helper->isRestrictedEntityType($entity_type)) {
            $restricted_by_site = TRUE;
            $entity_id = $meta['entity_info']['id'];
            $entity = $this->entityTypeManager->getStorage($entity_type)->load($entity_id);
            if ($entity) {
              // Get all Site Base URLs of the entity.
              $site_base_urls = $this->helper->getEntitySiteBaseUrls($entity);
              if (!empty($site_base_urls)) {
                // This entity should be only in the sitemap of its sites.
                foreach ($site_base_urls as $site_id => $site_base_url) {
                  $url = $link['url'];
                  // Override the link URL with the site Base URL.
                  $url = $this->helper->overrideUrlStringWithSiteBaseUrl($url, $site_base_url);
                  // Remove Site prefix.
                  $url = $this->aliasHelper->getPathAliasWithoutSitePrefix(['alias' => $url], $site_base_url);
                  // Copy to the Site sitemap.
                  $entity_link = $link;
                  $entity_link['url'] = $url;
                  $links_per_site[$site_id][] = $entity_link;
                }
              }
            }
          }
        }

        // This link does not have an entity,
        // or the entity is not restricted by site.
        if (!$restricted_by_site) {
          // Copy the link to the sitemap of all sites.
          foreach ($sites as $site_id => $site) {
            // Override the link URL with Site base URL.
            $url = $this->helper->overrideUrlStringWithSite($link['url'], $site, 'https');
            // Copy to the Site sitemap.
            $site_link = $link;
            $site_link['url'] = $url;
            $links_per_site[$site_id][] = $site_link;
          }
        }
      }

      // Now we have the sitemap of all sites.
      foreach ($links_per_site as $site_id => $site_links) {
        if (count($site_links)) {
          // Write to our own table.
          $values = [
            'id' => $chunk_id,
            'site_id' => $site_id,
            'sitemap_string' => $this->generateSitemapChunk($site_links),
            'sitemap_created' => $this->time->getRequestTime(),
          ];
          $this->db->insert('simple_sitemap_site')->fields($values)->execute();
        }
      }
    }
  }

}
