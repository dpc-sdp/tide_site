<?php

/**
 * @file
 * Install file for tide_site.
 */

use Drupal\Component\Utility\NestedArray;

/**
 * Implements hook_install().
 */
function tide_site_install() {
  // Retroactively create fields on existing entities.
  $info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  foreach ($info as $type => $bundles) {
    foreach (array_keys($bundles) as $bundle) {
      tide_site_entity_bundle_create($type, $bundle);
    }
  }
}

/**
 * New field taxonomy image logo.
 */
function tide_site_update_10001() {
  $configs = [
    'field.field.taxonomy_term.sites.field_additional_comment' => 'field_config',
    'field.storage.taxonomy_term.field_additional_comment' => 'field_storage_config',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
  $data = $config->getRawData();
  foreach ($config_read as $key => $item) {
    NestedArray::setValue($data, [
      $key,
    ], NestedArray::getValue($config_read, [
      $key,
    ]));
  }
  $config->setData($data)->save();
}
