<?php

/**
 * @file
 * Install file for tide_site.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\Display\EntityFormDisplayInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
use Drupal\taxonomy\TaxonomyPermissions;
use Drupal\Core\Site\Settings;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function tide_site_install() {
  // Retroactively create fields on existing entities.
  $info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  foreach ($info as $type => $bundles) {
    foreach (array_keys($bundles) as $bundle) {
      tide_site_entity_bundle_create($type, $bundle);
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function tide_site_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_site'][8002] = ['tide_core' => 8003];
  $dependencies['tide_site'][8004] = ['system' => 8805];

  return $dependencies;
}

/**
 * Add existing content types to field_site_homepage.
 */
function tide_site_update_8001() {
  /** @var \Drupal\tide_site\TideSiteFields $helper */
  $helper = \Drupal::service('tide_site.fields');

  $info = \Drupal::service('entity_type.bundle.info')->getAllBundleInfo();
  foreach ($info as $type => $bundles) {
    if ($type == 'node') {
      $helper->addContentTypesToSiteHomepageField(array_keys($bundles));
    }
  }
}

/**
 * Generate path alias for existing content.
 */
function tide_site_update_8002(&$sandbox) {
  $nids = [];
  $nodes = \Drupal::entityQuery('node')->execute();
  foreach ($nodes as $nid) {
    $nids[] = $nid;
  }

  // Use the sandbox to store the information needed to track progression.
  if (!isset($sandbox['current'])) {
    $sandbox['current'] = 0;
    $sandbox['max'] = count($nids);
  }

  /** @var \Drupal\pathauto\PathautoGenerator $generator */
  $generator = \Drupal::service('pathauto.generator');
  $entity_storage = \Drupal::entityTypeManager()->getStorage('node');

  $limit = 20;
  $nids = array_slice($nids, $sandbox['current'], $limit);
  foreach ($nids as $nid) {
    $node = $entity_storage->load($nid);
    $generator->updateEntityAlias($node, 'create', ['force' => TRUE]);
    // Update the progress.
    $sandbox['current']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['current'] / $sandbox['max']);

  if ($sandbox['#finished'] >= 1) {
    \Drupal::messenger()->addStatus(t('The batch URL Alias update is finished.'));
  }
}

/**
 * Import summary_contents and summary_media views.
 */
function tide_site_update_8003() {
  $view = 'views.view.summary_contents';
  $config_path = \Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($view, $source->read($view));
}

/**
 * Fixes node_delete_action plugin issue.
 */
function tide_site_update_8004() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('system.action.node_delete_action');
  $config->set('plugin', 'entity:delete_action:node');
  $config->save();
}

/**
 * Update og:image metatag for taxonomy_term:sites.
 */
function tide_site_update_8005() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $module_path = \Drupal::service('extension.list.module')->getPath('tide_site');
  $config_location = [$module_path . '/config/install'];
  _tide_import_single_config('field.storage.taxonomy_term.field_site_og_image', $config_location);
  _tide_import_single_config('field.field.taxonomy_term.sites.field_site_og_image', $config_location);

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('taxonomy_term.sites.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_site_og_image', [
      'weight' => 11,
      'settings' => [
        'entity_browser' => 'tide_image_browser',
        'field_widget_display' => 'rendered_entity',
        'field_widget_display_settings' => [
          'view_mode' => 'media_browser_preview',
        ],
        'field_widget_edit' => TRUE,
        'field_widget_remove' => TRUE,
        'selection_mode' => 'selection_append',
        'field_widget_replace' => FALSE,
        'open' => FALSE,
      ],
      'third_party_settings' => [],
      'type' => 'entity_browser_entity_reference',
      'region' => 'content',
    ]);
    $entity_form_display->save();
  }

  $metatag = \Drupal::configFactory()->getEditable('metatag.metatag_defaults.taxonomy_term__sites');
  if ($metatag->isNew()) {
    $config_location = [$module_path . '/config/optional'];
    _tide_import_single_config('metatag.metatag_defaults.taxonomy_term__sites', $config_location);
  }
  else {
    $og_image = $metatag->get('tags.og_image');
    if (!$og_image) {
      $metatag->set('tags.og_image', '[term:field_site_og_image:entity:field_media_image:entity:url]')
        ->save();
    }
  }
}

/**
 * Add Prominence of Acknowledgement of Country field.
 */
function tide_site_update_8006() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $module_path = \Drupal::service('extension.list.module')->getPath('tide_site');
  $config_location = [$module_path . '/config/install'];
  _tide_import_single_config('field.storage.taxonomy_term.field_prominence_ack_to_country', $config_location);
  _tide_import_single_config('field.field.taxonomy_term.sites.field_prominence_ack_to_country', $config_location);

  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('taxonomy_term.sites.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_prominence_ack_to_country', [
      'weight' => 11,
      'settings' => [
        'row' => 5,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textarea',
      'region' => 'content',
    ]);

    $og_image = $entity_form_display->getComponent('field_site_og_image');
    if ($og_image) {
      $og_image['weight'] = 12;
      $entity_form_display->setComponent('field_site_og_image', $og_image);
    }

    $entity_form_display->save();
  }
}

/**
 * Change field_media_site to be required.
 */
function tide_site_update_8007() {
  $entity_type = 'media';
  $field_name = 'field_media_site';
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
  if ($field_storage) {
    foreach ($field_storage->getBundles() as $bundle) {
      $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
      if ($field) {
        $field->set('required', TRUE);
        $field->save();
      }
    }
  }
}

/**
 * Disable default content view.
 */
function tide_site_update_8008() {
  $view_id = 'content';
  $view = \Drupal::entityTypeManager()->getStorage('view')->load($view_id);
  if ($view) {
    $view->setStatus(FALSE)->save();
  }
}

/**
 * Disable summary_contents view.
 */
function tide_site_update_8009() {
  $view_id = 'summary_contents';
  $view = \Drupal::entityTypeManager()->getStorage('view')->load($view_id);
  if ($view) {
    $view->setStatus(FALSE)->save();

    $view->delete();
    $config = \Drupal::configFactory()
      ->getEditable('views.view.summary_contents');
    if ($config) {
      $config->delete();
    }
  }
}

/**
 * Import summary_contents_filters.
 */
function tide_site_update_8010() {
  $view = 'views.view.summary_contents_filters';
  $config_path = \Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($view, $source->read($view));
}

/**
 * Update approver and site_admin roles permissions.
 *
 * 1. approver and site_admin cannot delete sites terms.
 * 2. revoke `administer taxonomy` permission.
 * 3. assign `access taxonomy overview` permission.
 */
function tide_site_update_8011() {
  $roles = ['approver', 'site_admin'];
  $taxonomy_permissions = new TaxonomyPermissions(\Drupal::entityManager());
  foreach ($roles as $role_id) {
    $assigned_permissions = ['access taxonomy overview'];
    foreach ($taxonomy_permissions->permissions() as $permission => $details) {
      $exploded = explode(' ', trim($permission));
      $vocabulary = $exploded[count($exploded) - 1];
      if ($exploded[0] == 'delete' && $vocabulary == 'sites') {
        continue;
      }
      $assigned_permissions[] = $permission;
    }
    user_role_revoke_permissions($role_id, ['administer taxonomy']);
    user_role_grant_permissions($role_id, $assigned_permissions);
  }
}

/**
 * Enable alt field for site logo.
 */
function tide_site_update_8012() {
  $entity_type = 'taxonomy_term';
  $bundle = 'sites';
  $field_name = 'field_site_logo';
  $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
  if ($field) {
    $field->setSetting('alt_field', TRUE)->save();
  }
}

/**
 * Disable content moderation view.
 */
function tide_site_update_8014() {
  $view = 'tide_core_moderated_content_filters';
  \Drupal::entityTypeManager()->getStorage('view')
    ->load($view)
    ->setStatus(FALSE)
    ->save();

  \Drupal::entityTypeManager()->getStorage('view')->load($view)->delete();
  \Drupal::configFactory()->getEditable('views.view.tide_core_moderated_content_filters')->delete();
}

/**
 * Import content moderation view.
 */
function tide_site_update_8015() {
  $view = 'views.view.tide_site_moderated_content_filters';
  $config_path = \Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($view, $source->read($view));
}

/**
 * Import summary content filters view.
 */
function tide_site_update_8016() {
  $view = 'views.view.summary_contents_filters';
  $config_path = \Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install';
  $source = new FileStorage($config_path);
  $config_storage = \Drupal::service('config.storage');
  $config_storage->write($view, $source->read($view));
}

/**
 * Changes display of dates in CMS to Australian style DD/MM/YYYY.
 */
function tide_site_update_8017() {
  // Changes content view.
  $summary_contents_view = \Drupal::configFactory()
    ->getEditable('views.view.summary_contents_filters');
  $display = $summary_contents_view->get('display');
  $display['default']['display_options']['fields']['changed_1']['settings']['custom_date_format'] = 'd/m/Y - H:i';
  $summary_contents_view->set('display', $display)->save();
}

/**
 * Enable SVG filetype for site logo.
 */
function tide_site_update_8018() {
  $entity_type = 'taxonomy_term';
  $bundle = 'sites';
  $field_name = 'field_site_logo';
  $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
  if ($field) {
    $field->setSetting('file_extensions', 'png gif jpg jpeg svg')->save();
  }
}

/**
 * Add a new optional Twitter Image on the Site Taxonomy.
 */
function tide_site_update_8019() {

  $config_location = [Settings::get('config_sync_directory', FALSE)];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  try {
    _tide_read_config('field.storage.taxonomy_term.field_site_twitter_image', $config_location, TRUE);
  }
  catch (Exception $ex) {
    if ($ex->getMessage() == 'Configuration does not exist in any provided locations') {

      $configs = [
        'field.storage.taxonomy_term.field_site_twitter_image' => 'field_storage_config',
        'field.field.taxonomy_term.sites.field_site_twitter_image' => 'field_config',
      ];
      $config_location = [\Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install'];
      // Check if field already exported to config/sync.
      foreach ($configs as $config => $type) {
        $config_read = _tide_read_config($config, $config_location, TRUE);
        $storage = \Drupal::entityTypeManager()->getStorage($type);
        $config_entity = $storage->createFromStorageRecord($config_read);
        $config_entity->save();
      }

      // Adding the field to display form.
      $entity_form_display = Drupal::entityTypeManager()
        ->getStorage('entity_form_display')
        ->load('taxonomy_term.sites.default');
      if ($entity_form_display) {
        $entity_form_display->setComponent('field_site_twitter_image', [
          'weight' => 13,
          'settings' => [
            'entity_browser' => 'tide_image_browser',
            'field_widget_display' => 'rendered_entity',
            'field_widget_display_settings' => [
              'view_mode' => 'media_browser_preview',
            ],
            'field_widget_edit' => 'true',
            'field_widget_remove' => 'true',
            'selection_mode' => 'selection_append',
            'field_widget_replace' => 'false',
            'open' => 'false',
          ],
          'third_party_settings' => [],
          'type' => 'entity_browser_entity_reference',
          'region' => 'content',
        ]);
      }
      $entity_form_display->save();

      // Adding the field to display view.
      $entity_view_display = Drupal::entityTypeManager()
        ->getStorage('entity_view_display')
        ->load('taxonomy_term.sites.default');
      if ($entity_view_display) {
        $entity_view_display->setComponent('field_site_twitter_image', [
          'weight' => 11,
          'label' => 'above',
          'settings' => [
            'view_mode' => 'default',
            'link' => FALSE,
          ],
          'third_party_settings' => [],
          'region' => 'content',
        ]);
      }
      $entity_view_display->save();
    }
  }
}

/**
 * Create sites social media link field.
 */
function tide_site_update_8020(&$sandbox) {
  $configs = [
    'field.storage.taxonomy_term.field_site_social_links' => 'field_storage_config',
    'field.field.taxonomy_term.sites.field_site_social_links' => 'field_config',
  ];
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('taxonomy_term.sites.default');

  if ($entity_form_display instanceof EntityFormDisplayInterface) {
    $entity_form_display->setComponent('field_site_social_links', [
      'weight' => 14,
      'settings' => [
        'placeholder_url' => 'https://example.com/Social',
        'placeholder_title' => 'Example Social',
      ],
      'third_party_settings' => [
        'maxlength' => [
          'maxlength_js' => 35,
          'maxlength_js_label' => 'Link text limited to @limit characters, remaining: <strong>@remaining</strong>',
        ],
      ],
      'type' => 'link_default',
      'region' => 'content',
    ]);

    $entity_form_display->save();
  }

}

/**
 * Install "Create Menus Permission" module.
 */
function tide_site_update_8021() {
  $module = 'create_menus_permission';
  if (!\Drupal::moduleHandler()->moduleExists($module)) {
    \Drupal::service('module_installer')->install([$module]);
  }
}

/**
 * Display only distinct results.
 */
function tide_site_update_8022() {
  // Getting the updated query option from install dir.
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install'];
  $config = 'views.view.summary_contents_filters';
  $config_read = _tide_read_config($config, $config_location, FALSE);
  $query = $config_read['display']['default']['display_options']['query'];

  // Setting the updated query option in config sync.
  $summary_contents_view = \Drupal::configFactory()
    ->getEditable('views.view.summary_contents_filters');
  $summary_contents_view->set('display.default.display_options.query', $query)->save();
}

/**
 * Create new Linkit profile to view content information.
 */
function tide_site_update_8023() {
  $configs = [
    'linkit.linkit_profile.site_content' => 'linkit_profile',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [__DIR__ . '/config/install'];
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = substr($config, strrpos($config, '.') + 1);
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }
}

/**
 * Add a new Table of contents on the Site Taxonomy.
 */
function tide_site_update_8024() {
  $configs = [
    'field.storage.taxonomy_term.field_show_table_of_contents' => 'field_storage_config',
    'field.storage.taxonomy_term.field_title_of_table_of_contents' => 'field_storage_config',
    'field.field.taxonomy_term.sites.field_show_table_of_contents' => 'field_config',
    'field.field.taxonomy_term.sites.field_title_of_table_of_contents' => 'field_config',
  ];
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_site') . '/config/install'];
  // Check if field already exported to config/sync.
  foreach ($configs as $config => $type) {
    $config_read = _tide_read_config($config, $config_location, TRUE);
    $storage = \Drupal::entityTypeManager()->getStorage($type);
    $id = $storage->getIDFromConfigName($config, $storage->getEntityType()->getConfigPrefix());
    if ($storage->load($id) == NULL) {
      $config_entity = $storage->createFromStorageRecord($config_read);
      $config_entity->save();
    }
  }

  // Adding the field to display form.
  $entity_form_display = Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('taxonomy_term.sites.default');
  if ($entity_form_display) {
    $entity_form_display->setComponent('field_show_table_of_contents', [
      'weight' => 17,
      'settings' => [
        'display_label' => TRUE,
      ],
      'third_party_settings' => [],
      'type' => 'boolean_checkbox',
      'region' => 'content',
    ]);
    $entity_form_display->setComponent('field_title_of_table_of_contents', [
      'weight' => 18,
      'settings' => [
        'size' => 60,
        'placeholder' => '',
      ],
      'third_party_settings' => [],
      'type' => 'string_textfield',
      'region' => 'content',
    ]);
    $field_group = $entity_form_display->getThirdPartySettings('field_group');
    $field_group['group_table_of_contents'] = [
      'children' => [
        'field_show_table_of_contents',
        'field_title_of_table_of_contents',
      ],
      'parent_name' => '',
      'label' => 'Table of contents',
      'weight' => 15,
      'format_type' => 'details',
      'region' => 'content',
      'format_settings' => [
        'show_empty_fields' => FALSE,
        'required_fields' => TRUE,
        'id' => '',
        'classes' => '',
        'description' => '',
        'open' => FALSE,
      ],
    ];
    $entity_form_display->setThirdPartySetting('field_group', 'group_table_of_contents', $field_group['group_table_of_contents']);
  }
  $entity_form_display->save();

  // Adding the field to display view.
  $entity_view_display = Drupal::entityTypeManager()
    ->getStorage('entity_view_display')
    ->load('taxonomy_term.sites.default');
  if ($entity_view_display) {
    $entity_view_display->setComponent('field_show_table_of_contents', [
      'weight' => 14,
      'label' => 'above',
      'settings' => [
        'format' => 'default',
        'format_custom_false' => '',
        'format_custom_true' => '',
      ],
      'third_party_settings' => [],
      'region' => 'content',
      'type' => 'boolean',
    ]);
    $entity_view_display->setComponent('field_title_of_table_of_contents', [
      'weight' => 15,
      'label' => 'above',
      'settings' => [
        'link_to_entity' => FALSE,
      ],
      'third_party_settings' => [],
      'region' => 'content',
      'type' => 'string',
    ]);
  }
  $entity_view_display->save();

  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('jsonapi_extras.jsonapi_resource_config.taxonomy_term--sites');

  $content = $config->get('resourceFields');
  if (!isset($content['field_show_table_of_contents'])) {
    $content['field_show_table_of_contents'] = [
      'fieldName' => 'field_show_table_of_contents',
      'publicName' => 'field_show_table_of_contents',
      'enhancer' => [
        'id' => '',
      ],
      'disabled' => FALSE,
    ];
    $config->set('resourceFields', $content);
  }
  if (!isset($content['field_title_of_table_of_contents'])) {
    $content['field_title_of_table_of_contents'] = [
      'fieldName' => 'field_title_of_table_of_contents',
      'publicName' => 'field_title_of_table_of_contents',
      'enhancer' => [
        'id' => '',
      ],
      'disabled' => FALSE,
    ];
    $config->set('resourceFields', $content);
  }
  $config->save();
}

/**
 * Updates user permissions [SDPAP-7778].
 */
function tide_site_update_8025() {
  if (\Drupal::moduleHandler()->moduleExists('tide_site')) {
    /** @var \Drupal\tide_site\TideSiteHelper $site_helper */
    $site_helper = \Drupal::service('tide_site.helper');
    $sites = $site_helper->getAllSites();
    $usernames = [
      'editor1.test@example.com',
      'approver1.test@example.com',
      'previewer1.test@example.com',
    ];
    foreach ($usernames as $username) {
      $user = user_load_by_name($username);
      $account = User::load($user->id());
      if ($account->hasField('field_name')) {
        $account->set('field_name', $username);
      }
      if ($account->hasField('field_last_name')) {
        $account->set('field_last_name', $username);
      }
      $account->set('field_user_site', $sites);
      $account->save();
    }
  }
}
